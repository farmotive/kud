#!/bin/bash
#
# See usage().

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

# We do this so the called script name variable is avilable in utility functions
# below, in case of name change, brew alias, etc.
SCRIPT=`basename ${BASH_SOURCE[0]}`

usage() {
  cat <<EOF
${SCRIPT}(1)

NAME
    ${SCRIPT} - Quick k8s pod delete utility.

REQUIRES
    kubectl(1)

SYNOPSIS
    ${SCRIPT} [OPTIONS]

DESCRIPTION
    ${SCRIPT} is a quick kubernetes (k8s) utility to delete 1+n pods. ${SCRIPT} prompts for:
      - <NAMESPACE> (defaults to current ns. See kubens(1))
      - <POD> (defaults to "1")
      - <CONFIRM> (defaults negatory)
    ENTER to use defaults.

OPTIONS
    -h, --help
        Show this help message
    -f, --force
        `kud -f` will delete the first pod in the namespace without further prompting.
    -a, --all
        Delete all pods in the namespace

SEE ALSO
    kubectx(1), kubens(1)
EOF
}

ns_current() {
  # Borrowed partly from kubens current_namespace().
  cur_ctx=$(kubectl config current-context)
  echo "$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${cur_ctx}\")].context.namespace}")"
}

ns_param() {
  local ns=$(ns_select)
  if [[ ! -z ${ns:-} ]]; then
    echo "--namespace=${ns}"
  fi
}

ns_list() {
  kubectl get namespaces -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

ns_number_list() {
  ns_list | nl
}

ns_select() {
  if [[ ! -z ${NS:-} ]]; then
    ns_list | sed -n ${NS}p
  elif [[ ! -z ${NAMESPACE:-} ]]; then
    echo $NAMESPACE
  else
    ns_current
  fi
}

po_list_state() {
  names=($(kubectl $(ns_param) get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'))
  states=($(kubectl $(ns_param) get pods -o=jsonpath='{range .items[*].status.phase}{@}{"\n"}{end}'))
  for (( i=0; $i < ${#names[@]}; i+=1 )); do echo "${names[i]}: ${states[i]}"; done
}

po_list() {
  kubectl $(ns_param) \
    get pods \
    -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

po_number_list() {
  po_list_state | nl
}

po_select() {
  po_list | sed -n ${POD:-1}p
}

po_del() {
  kubectl $(ns_param) \
    delete pod $(po_select)
}

po_del_all() {
  kubectl $(ns_param) \
    delete pod $(po_list)
}

po_del_force() {
  kubectl \
    delete pod $(kubectl get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}' |head -n1)
}

# Transform long options to short ones. Sick trick.
# http://stackoverflow.com/a/30026641/4096495
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")       set -- "$@" "-h" ;;
    "--all")        set -- "$@" "-a" ;;
    "--force")      set -- "$@" "-f" ;;
    *)              set -- "$@" "$arg"
  esac
done

while getopts :haf OPT; do
  case $OPT in
    h ) HELP=true;;
    a ) ALL=true;;
    f ) FORCE=true;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND-1))

# Usage, list, and delete should not happen simultaneously, so elif.
if [[ ${HELP:-} == 'true' ]]; then
  usage; exit 0
  else
    if [[ ${FORCE:-} == 'true' ]]; then
    po_del_force; exit 0
    else
      if [[ ${ALL:-} == 'true' ]]; then
      po_del_all; exit 0
      else
        ns=$(ns_current)
        echo "Namespace? (default ${ns:-default}):"; ns_number_list; read NS;
        echo 'Pod number? (default 1):'; po_number_list; read POD;
        # Might want to use the negated form: 
        # https://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
        read -p "Are you sure? " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            po_del
          fi
      fi
    fi
fi
